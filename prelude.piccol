def {} Void;
def {v:Int} Int;
def {v:UInt} UInt;
def {v:Sym} Sym;
def {v:Bool} Bool;
def {v:Real} Real;

def [ a:Int  b:Int  ];
def [ a:UInt b:UInt ];
def [ a:Bool b:Bool ];
def [ a:Real b:Real ];
def [ a:Sym  b:Sym  ];

def [v:Int];
def [v:UInt];
def [v:Sym];
def [v:Bool];
def [v:Real];


/*** ***/


<:: spaces

  space :- ' '.
  space :- '\n'.
  space :- '\t'.

  comment_x :- '\n'.
  comment_x :- \any comment_x.
  comment_xx :- '*/'.
  comment_xx :- \any comment_xx.

  comment :- '#' comment_x.
  comment :- '/*' comment_xx.

  spaces :- space spaces.
  spaces :- comment spaces.
  spaces :- .

::>


/*** ***/


<:: ident(spaces)

  ident_tail :- \upcase ident_tail.
  ident_tail :- \locase ident_tail.
  ident_tail :- \digit ident_tail.
  ident_tail :- '_' ident_tail.
  ident_tail :- .

  ident :- \locase ident_tail.

  ident_pad :- spaces ident spaces.

::>


/*** ***/


<:: literals(ident)

  variable :- '\\' '\\'.
  variable :- '\\' ident.

  digits_tail :- \digit digits_tail.
  digits_tail :- .
  digits :- \digit digits_tail.

  pos_real :- digits '.' digits.
  pos_real :- digits 'f'.
  neg_real :- '-' pos_real.
  real :- neg_real.
  real :- pos_real.

  uinteger :- digits 'u'.

  neg_integer :- '-' digits.
  pos_integer :- digits.
  integer :- neg_integer.
  integer :- pos_integer.

  number :- real.
  number :- uinteger.
  number :- integer.

  sym_tail :- {\\'} sym_tail.
  sym_tail :- {'}.
  sym_tail :- \any sym_tail.
  sym :- {'} sym_tail.

  bool :- 'true'.
  bool :- 'false'.
  nil :- 'nil'.

  literal :- variable.
  literal :- bool.
  literal :- nil.
  literal :- sym.
  literal :- number.

::>


/*** ***/


<:: types(ident)

  typename :- \upcase ident_tail.

  tupletype_tail :- ']'.
  tupletype_tail :- type spaces tupletype_tail.

  tupletype :- '[' spaces tupletype_tail.

  type :- typename.
  type :- tupletype.

  type_pad :- spaces type spaces.

::>


/*** ***/


<:: type_canonical(ident)

  typename :- \upcase ident_tail &''.
  tupletype_tail :- ']' @']'.
  tupletype_tail :- type @' ' tupletype_tail.
  tupletype :- '[' @'[ ' spaces tupletype_tail.

  type :- spaces typename spaces.
  type :- spaces tupletype spaces.

  type_canonical :- type.

::>

<:: body(literals)

  body_paren :- sym body_paren.
  body_paren :- ')'.
  body_paren :- '(' body_paren body_paren.
  body_paren :- \any body_paren.

  body :- sym &'' body.
  body :- '(' body_paren &'' body.
  body :- body_end.
  body :- \any &'' body.
  body :- .

::>


/*** ***/


<:: expr(literals) 

  literal_here :- literal &''.

  val :- spaces literal_here spaces.
  val :- spaces '(' expr ')' spaces.

  val :- spaces 'bool' spaces '(' expr ')' spaces @' $to_bool'.
  val :- spaces 'int'  spaces '(' expr ')' spaces @' $to_int'.
  val :- spaces 'uint' spaces '(' expr ')' spaces @' $to_uint'.
  val :- spaces 'real' spaces '(' expr ')' spaces @' $to_real'.

  expr_neg :- spaces '!' spaces val @' $not'.
  expr_neg :- spaces '-' spaces val @' $neg'.
  expr_neg :- spaces '~' spaces val @' $bnot'.
  expr_neg :- spaces val.

  noop_tail :- @'] $noop'.

  expr_bit_head :- @'[(' expr_neg @')'.
  expr_bit_tail :- @'('  expr_bit @')] '.

  expr_bit :- expr_bit_head '&' expr_bit_tail @'$band'.
  expr_bit :- expr_bit_head '|' expr_bit_tail @'$bor'.
  expr_bit :- expr_bit_head '^' expr_bit_tail @'$bxor'.
  expr_bit :- expr_bit_head '<<' expr_bit_tail @'$bshl'.
  expr_bit :- expr_bit_head '>>' expr_bit_tail @'$bshr'.
  expr_bit :- expr_bit_head noop_tail.

  expr_mul_head :- @'[(' expr_bit @')'.
  expr_mul_tail :- @'('  expr_mul @')] '.

  expr_mul :- expr_mul_head '*' expr_mul_tail @'$mul'.
  expr_mul :- expr_mul_head '/' expr_mul_tail @'$div'.
  expr_mul :- expr_mul_head '%' expr_mul_tail @'$mod'.
  expr_mul :- expr_mul_head noop_tail.

  expr_add_head :- @'[(' expr_mul @')'.
  expr_add_tail :- @'('  expr_add @')] '.

  expr_add :- expr_add_head '+' expr_add_tail @'$add'.
  expr_add :- expr_add_head '-' expr_add_tail @'$sub'.
  expr_add :- expr_add_head noop_tail.

  expr_eq_head :- @'[(' expr_add @')'.
  expr_eq_tail :- @'('  expr_add @')] '.

  expr_eq :- expr_eq_head '='  expr_eq_tail @'$eq'.
  expr_eq :- expr_eq_head '==' expr_eq_tail @'$eq'.
  expr_eq :- expr_eq_head '!=' expr_eq_tail @'$eq $not'.
  expr_eq :- expr_eq_head '<'  expr_eq_tail @'$lt'.
  expr_eq :- expr_eq_head '<=' expr_eq_tail @'$lte'.
  expr_eq :- expr_eq_head '>'  expr_eq_tail @'$gt'.
  expr_eq :- expr_eq_head '>=' expr_eq_tail @'$gte'.
  expr_eq :- expr_eq_head noop_tail.

  expr_and_head :- @'[(' expr_eq @')'.
  expr_and_tail :- @'('  expr_and @')] '.

  expr_and :- expr_and_head '&&' expr_and_tail @'$and'.
  expr_and :- expr_and_head '||' expr_and_tail @'$or'.
  expr_and :- expr_and_head noop_tail.

  expr :- expr_and.

::>


/*** ***/


<:: default(expr) default :- expr. ::>


/*** ***/


<:: q
  q :- \any &'' q.
  q :- .
::>

<:: case(body)

  body_end :- ';' @';\n'.

  literal_here :- literal &''.

  branches :- spaces @'[' &'top' @' ' literal_here @'] $eq ? ' spaces '?' body branches.
  branches :- spaces.

  variable_here :- variable &'push'.

  case :- spaces variable_here spaces ':' branches.

::>

<:: seq(body,types)

  ident_here :- ident @' ' &'' @'_start ' &'push'.
  type_here :- type &''.

  act :- @' ' &'top' @' '.

  body_end :- ',' act.
  body_end :- '=>' act spaces.

  bodies :- @' ' &'top' @'_end->' type_here spaces \end.
  bodies :- \end act @' ' &'top' @'_end->Void' .
  bodies :- body bodies.
  
  seq :- spaces ident_here spaces '=>' spaces bodies.

::>

